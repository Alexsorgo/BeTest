import bert
import paho.mqtt.client as mqtt

# The callback for when the client receives a CONNACK response from the server.
from erlastic import Atom
from requests import sms, login


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.publish(topic="events/1//api/anon//", payload=bytearray(login), qos=2, retain=False)
    print("Connected with result code "+str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.


# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    # str = bytes.decode(msg.payload)
    # print(str)
    print(msg.topic)
    print(bert.decode(bytes(msg.payload)))
    for i in (bert.decode(bytes(msg.payload))):
        if i == (Atom('ok'), Atom('sms_sent')):
            client.publish(topic="events/1//api/anon//", payload=bytearray(sms), qos=2, retain=False)

    # print(bert.decode(asd))
    # for c in msg.payload: print(c)


# android payload
# {'Auth',<<"reg_67cf97ddbb395e0">>,<<"67cf97ddbb395e0">>,[],
#         <<"380632889890">>,[],reg,[],[],
#         [jwt],
#         [{'Feature',<<"67cf97ddbb395e0_15217341740131">>,
#                     <<"AppVersion">>,<<"0.0.0.147">>,<<"AUTH_DATA">>},
#          {'Feature',<<"67cf97ddbb395e0_15217341740142">>,<<"OS">>,
#                     <<"Android 7.0">>,<<"AUTH_DATA">>},
#          {'Feature',<<"67cf97ddbb395e0_15217341740130">>,
#                     <<"DeviceModel">>,<<"Mi-4c">>,<<"AUTH_DATA">>}],
#         [],[],[],[]}

# payload = [131,104,15,115,4,65,117,116,104,109,0,0,0,19,114,101,103,95,54,55,99,102,57,55,100,100,98,98,51,57,53,101,
#            48,109,0,0,0,15,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,106,109,0,0,0,12,51,56,48,54,51,50,56,56,
#            57,56,57,48,106,115,3,114,101,103,106,106,108,0,0,0,1,115,3,106,119,116,106,108,0,0,0,3,104,5,115,7,70,101,
#            97,116,117,114,101,109,0,0,0,30,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,49,53,50,49,55,51,52,49,
#            55,52,48,49,51,49,109,0,0,0,10,65,112,112,86,101,114,115,105,111,110,109,0,0,0,9,48,46,48,46,48,46,49,52,55,
#            109,0,0,0,9,65,85,84,72,95,68,65,84,65,104,5,115,7,70,101,97,116,117,114,101,109,0,0,0,30,54,55,99,102,57,55,
#            100,100,98,98,51,57,53,101,48,95,49,53,50,49,55,51,52,49,55,52,48,49,52,50,109,0,0,0,2,79,83,109,0,0,0,11,65,
#            110,100,114,111,105,100,32,55,46,48,109,0,0,0,9,65,85,84,72,95,68,65,84,65,104,5,115,7,70,101,97,116,117,114,
#            101,109,0,0,0,30,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,49,53,50,49,55,51,52,49,55,52,48,49,51,
#            48,109,0,0,0,11,68,101,118,105,99,101,77,111,100,101,108,109,0,0,0,5,77,105,45,52,99,109,0,0,0,9,65,85,84,
#            72,95,68,65,84,65,106,106,106,106,106]

# ios payload
# {'Auth',<<"reg_66b4c705a3e1d862">>,<<"66b4c705a3e1d862">>,[],
#         <<"380935940741">>,[],reg,[],[],
#         [],
#         [{'Feature',<<"67cf97ddbb395e0_15217341740131">>,
#                     <<"AppVersion">>,<<"0.0.0.147">>,<<"AUTH_DATA">>},
#          {'Feature',<<"67cf97ddbb395e0_15217341740142">>,<<"OS">>,
#                     <<"ios">>,<<"AUTH_DATA">>},
#          {'Feature',<<"67cf97ddbb395e0_15217341740130">>,
#                     <<"DeviceModel">>,<<"Mi-4c">>,<<"AUTH_DATA">>}],
#         [],[],[],[]}


# payload = [131,104,15,100,0,4,65,117,116,104,109,0,0,0,19,114,101,
#   103,95,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,
#   109,0,0,0,15,54,55,99,102,57,55,100,100,98,98,51,57,53,
#   101,48,106,109,0,0,0,12,51,56,48,57,51,53,57,52,48,55,
#   52,49,106,100,0,3,114,101,103,106,106,106,108,0,0,0,3,
#   104,5,100,0,7,70,101,97,116,117,114,101,109,0,0,0,30,54,
#   55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,49,53,
#   50,49,55,51,52,49,55,52,48,49,51,49,109,0,0,0,10,65,112,
#   112,86,101,114,115,105,111,110,109,0,0,0,9,48,46,48,46,
#   48,46,49,52,55,109,0,0,0,9,65,85,84,72,95,68,65,84,65,
#   104,5,100,0,7,70,101,97,116,117,114,101,109,0,0,0,30,54,
#   55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,49,53,
#   50,49,55,51,52,49,55,52,48,49,52,50,109,0,0,0,2,79,83,
#   109,0,0,0,3,105,111,115,109,0,0,0,9,65,85,84,72,95,68,
#   65,84,65,104,5,100,0,7,70,101,97,116,117,114,101,109,0,
#   0,0,30,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,
#   95,49,53,50,49,55,51,52,49,55,52,48,49,51,48,109,0,0,0,
#   11,68,101,118,105,99,101,77,111,100,101,108,109,0,0,0,5,
#   77,105,45,52,99,109,0,0,0,9,65,85,84,72,95,68,65,84,65,
#   106,106,106,106,106]

payload = [131,104,15,100,0,4,65,117,116,104,109,0,0,0,20,114,101,
103,95,54,54,98,52,99,55,48,53,97,51,101,49,100,56,54,
50,109,0,0,0,16,54,54,98,52,99,55,48,53,97,51,101,49,
100,56,54,50,106,109,0,0,0,12,51,56,48,57,51,53,57,52,
48,55,52,49,106,100,0,3,114,101,103,106,106,106,108,0,0,
0,3,104,5,100,0,7,70,101,97,116,117,114,101,109,0,0,0,
30,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,
49,53,50,49,55,51,52,49,55,52,48,49,51,49,109,0,0,0,10,
65,112,112,86,101,114,115,105,111,110,109,0,0,0,9,48,46,
48,46,48,46,49,52,55,109,0,0,0,9,65,85,84,72,95,68,65,
84,65,104,5,100,0,7,70,101,97,116,117,114,101,109,0,0,0,
30,54,55,99,102,57,55,100,100,98,98,51,57,53,101,48,95,
49,53,50,49,55,51,52,49,55,52,48,49,52,50,109,0,0,0,2,
79,83,109,0,0,0,3,105,111,115,109,0,0,0,9,65,85,84,72,
95,68,65,84,65,104,5,100,0,7,70,101,97,116,117,114,101,
109,0,0,0,30,54,55,99,102,57,55,100,100,98,98,51,57,53,
101,48,95,49,53,50,49,55,51,52,49,55,52,48,49,51,48,109,
0,0,0,11,68,101,118,105,99,101,77,111,100,101,108,109,0,
0,0,5,77,105,45,52,99,109,0,0,0,9,65,85,84,72,95,68,65,
84,65,106,106,106,106,106]

client = mqtt.Client(client_id="reg_66b4c705a3e1d862", clean_session=False)
client.will_set(topic="version/4", payload=None, qos=2, retain=False)
client.username_pw_set(username="api", password=None)
client.on_connect = on_connect
client.on_message = on_message
client.connect("52.36.43.142", 1883, 60)

client.loop_forever()
